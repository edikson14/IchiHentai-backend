require('dotenv').config(); // Memuat variabel dari file .env atau Secrets
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const Manga = require('./models/manga');

const app = express();
// Render menyediakan PORT secara otomatis, jadi kita gunakan itu
const PORT = process.env.PORT || 3000;

app.use(cors());
app.use(express.json({ limit: '50mb' })); // Batas besar untuk gambar base64

const mongoURI = process.env.MONGO_URI;

mongoose.connect(mongoURI)
  .then(() => console.log('✅ Berhasil terhubung ke MongoDB Atlas!'))
  .catch(err => console.error('❌ Gagal terhubung ke MongoDB:', err));

// --- API ROUTES ---
app.get('/manga', async (req, res) => {
  try {
    // Mengambil semua data & mengurutkan berdasarkan waktu pembuatan (terbaru dulu)
    const allManga = await Manga.find().sort({ createdAt: -1 });
    res.json(allManga);
  } catch (err) {
    res.status(500).json({ message: 'Server error: ' + err.message });
  }
});

app.post('/manga', async (req, res) => {
  const manga = new Manga({
    title: req.body.title,
    synopsis: req.body.synopsis,
    cover: req.body.cover,
    price: req.body.price,
    genres: req.body.genres,
    lang: req.body.lang,
    chapters: req.body.chapters,
    author: "Admin",
    status: "Ongoing",
  });

  try {
    const newManga = await manga.save();
    res.status(201).json(newManga);
  } catch (err) {
    res.status(400).json({ message: 'Gagal menyimpan manga: ' + err.message });
  }
});

app.listen(PORT, () => {
  console.log(`🚀 Server Pustaka Manga berjalan di port ${PORT}`);
});
